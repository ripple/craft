name: Test

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  clippy_linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features

      - name: Run Clippy (xrpl-std)
        run: |
          cd xrpl-std 
          cargo clippy --all-targets --all-features

      - name: Run Clippy (All Contracts)
        run: |
          for dir in ./projects/*/; do
            if [ -f "$dir/Cargo.toml" ]; then
              echo "ðŸ”§ Clippy in $dir"
              (cd "$dir" && cargo clippy --all-targets --all-features) || exit 1
            fi
          done

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run fmt (Craft)
        run: cargo fmt --all -- --check

      - name: Run fmt (xrpl-std)
        run: |
          cd xrpl-std 
          cargo fmt --all -- --check

      - name: Run fmt (All Contracts)
        run: |
          for dir in ./projects/*/; do
            if [ -f "$dir/Cargo.toml" ]; then
              echo "ðŸ”§ Fmt in $dir"
              (cd "$dir" && cargo fmt --all -- --check) || exit 1
            fi
          done

  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Add target
        run: rustup target add wasm32-unknown-unknown

      - name: Build & Test `xrpl-std`
        run: |
          cd xrpl-std 
          cargo build 
          cargo test
          cargo build --target wasm32-unknown-unknown 
          cargo rustc --target wasm32-unknown-unknown -- -D warnings

      - name: Build & Test `wasm-host`
        run: (cd wasm-host && cargo build && cargo test)

      - name: Build all example contracts
        run: |
          for dir in ./projects/*/; do
            if [ -f "$dir/Cargo.toml" ]; then
              echo "ðŸ”§ Building in $dir"
              (cd "$dir" && cargo build --target wasm32-unknown-unknown && cargo build --target wasm32-unknown-unknown --release && cargo rustc --target wasm32-unknown-unknown -- -D warnings) || exit 1
            fi
          done

      - name: Build and Test `craft`
        run: |
          cargo build
          cargo test
