name: Test

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

# Make sure CI fails on all warnings, including Clippy lints
env:
  RUSTFLAGS: "-Dwarnings"

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      # This runs the pre-commit hooks defined in .pre-commit-config.yaml
      # TODO: figure out how to update to use pre-commit.ci
      - uses: pre-commit/action@v3.0.1

  clippy_linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -Dclippy::all

      - name: Run Clippy (xrpl-std)
        run: |
          cd xrpl-std
          cargo clippy --all-targets --all-features -- -Dclippy::all

      - name: Run Clippy (All Example Contracts)
        run: |
          find ./projects -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            echo "ðŸ”§ Clippy in $dir"
            (cd "$dir" && cargo clippy --target wasm32-unknown-unknown --all-features -- -Dclippy::all) || exit 1
          done

      - name: Run Clippy (All Test Contracts)
        run: |
          find ./rippled-tests -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            echo "ðŸ”§ Clippy in $dir"
            (cd "$dir" && cargo clippy --all-targets --all-features) || exit 1
          done

      - name: Check project exports
        run: |
          find ./projects -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            grep -q "finish() -> i32" "$dir/src/lib.rs" || exit 1
          done

      - name: Check ripple-tests exports
        run: |
          find ./rippled-tests -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            grep -q "finish() -> i32" "$dir/src/lib.rs" || exit 1
          done

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run fmt (Craft)
        run: cargo fmt --all -- --check

      - name: Run fmt (xrpl-std)
        run: |
          cd xrpl-std
          cargo fmt --all -- --check

      - name: Run fmt (All Example Contracts)
        run: |
          find ./projects -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            echo "ðŸ”§ Fmt in $dir"
            (cd "$dir" && cargo fmt --all -- --check) || exit 1
          done

      - name: Run fmt (All Test Contracts)
        run: |
          find ./rippled-tests -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            echo "ðŸ”§ Fmt in $dir"
            (cd "$dir" && cargo fmt --all -- --check) || exit 1
          done

  # Note: This job should not be "required" for PRs, as during development there may be temporary
  # discrepancies between craft and rippled
  host_function_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Audit host functions to ensure they match the XRPLd host functions
        run: node tools/compareHostFunctions.js https://github.com/XRPLF/rippled/tree/ripple/smart-escrow

  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Add target
        run: rustup target add wasm32-unknown-unknown

      - name: Build & Test `xrpl-std`
        run: |
          cd xrpl-std
          cargo build
          cargo test
          cargo build --target wasm32-unknown-unknown
          cargo rustc --target wasm32-unknown-unknown -- -D warnings

      - name: Build & Test `wasm-host`
        run: (cd wasm-host && cargo build && cargo test)

      - name: Build all example contracts
        run: |
          find ./projects -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            echo "ðŸ”§ Building in $dir"
            (cd "$dir" && cargo build --target wasm32-unknown-unknown && cargo build --target wasm32-unknown-unknown --release && cargo rustc --target wasm32-unknown-unknown -- -D warnings) || exit 1
          done

      - name: Build all test contracts
        run: |
          find ./rippled-tests -name "Cargo.toml" -type f | while read -r cargo_file; do
            dir=$(dirname "$cargo_file")
            echo "ðŸ”§ Building in $dir"
            (cd "$dir" && cargo build --target wasm32-unknown-unknown && cargo build --target wasm32-unknown-unknown --release && cargo rustc --target wasm32-unknown-unknown -- -D warnings) || exit 1
          done

      - name: Build and Test `craft`
        run: |
          cargo build
          cargo test

  generate-documentation:
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Build documentation
        run: |
          cd xrpl-std
          cargo doc --no-deps

      - name: Upload documentation files as artifact
        id: docs-artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: xrpl-std/target/doc
          retention-days: 10

  deploy-docs-pages:
    permissions:
      id-token: write # Needed for OIDC authentication
      pages: write # this permission is needed for deploying into Github Pages
    environment:
      name: github-pages
      url: ${{ steps.docs-artifact.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-documentation
    # Deploy docs only pushes into the main branch
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Documentation to GitHub Pages
        id: docs-artifact
        uses: actions/deploy-pages@v4
